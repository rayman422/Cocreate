generator client {
	provider = "prisma-client-js"
}

datasource db {
	provider = "sqlite"
	url      = env("DATABASE_URL")
}

model User {
	id            String          @id @default(cuid())
	createdAt     DateTime        @default(now())
	updatedAt     DateTime        @updatedAt
	email         String?         @unique
	name          String?
	image         String?
	isAdmin       Boolean         @default(false)
	sessions      Session[]
	accounts      Account[]
	profile       Profile?
	memberships   Membership[]
	projects      Project[]       @relation("ProjectOwner")
	contributions ContributionEvent[]
	assignedTasks Task[]          @relation("TaskAssignee")
	createdArtifactVersions ArtifactVersion[] @relation("UserCreatedArtifactVersions")
	notifications Notification[]
	messages      ChatMessage[]   @relation("UserChatMessages")
	reports       Report[]        @relation("UserReports")
}

model Account {
	id                String   @id @default(cuid())
	userId            String
	type              String
	provider          String
	providerAccountId String
	refresh_token     String?
	access_token      String?
	expires_at        Int?
	token_type        String?
	scope             String?
	id_token          String?
	session_state     String?

	user User @relation(fields: [userId], references: [id], onDelete: Cascade)

	@@unique([provider, providerAccountId])
}

model Session {
	id           String   @id @default(cuid())
	sessionToken String   @unique
	userId       String
	expires      DateTime

	user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
	identifier String
	token      String   @unique
	expires    DateTime

	@@unique([identifier, token])
}

model Profile {
	id           String      @id @default(cuid())
	userId       String      @unique
	disciplines  Discipline[]
	skills       Skill[]     @relation("ProfileSkills")
	availability String?
	bio          String?
	website      String?
	location     String?

	user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Discipline {
	id      String   @id @default(cuid())
	name    String   @unique
	profiles Profile[]
}

model Skill {
	id       String    @id @default(cuid())
	name     String    @unique
	profiles Profile[] @relation("ProfileSkills")
	requiredByRoles RoleOpening[] @relation("RoleSkillRequirements")
}

model Project {
	id           String        @id @default(cuid())
	createdAt    DateTime      @default(now())
	updatedAt    DateTime      @updatedAt
	title        String
	slug         String        @unique
	summary      String
	ownerId      String
	visibility   String        @default("PUBLIC")
	license      String        @default("MIT")
	memberships  Membership[]
	roles        RoleOpening[]
	tasks        Task[]
	artifacts    Artifact[]
	contributionEvents ContributionEvent[]
	chatMessages ChatMessage[]
	showcasedAt  DateTime?

	owner User @relation("ProjectOwner", fields: [ownerId], references: [id])
}

model Membership {
	id        String     @id @default(cuid())
	userId    String
	projectId String
	role      String      @default("CONTRIBUTOR")
	status    String      @default("ACTIVE")

	user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
	project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

	@@unique([userId, projectId])
}

model RoleOpening {
	id          String   @id @default(cuid())
	projectId   String
	title       String
	description String
	requiredSkills Skill[] @relation("RoleSkillRequirements")
	open        Boolean  @default(true)

	project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Task {
	id           String      @id @default(cuid())
	projectId    String
	title        String
	description  String?
	status       String      @default("TODO")
	assigneeId   String?
	dueDate      DateTime?
	weight       Int         @default(1)

	project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
	assignee User? @relation("TaskAssignee", fields: [assigneeId], references: [id])
	artifacts Artifact[]
	contributions ContributionEvent[]
}

model Artifact {
	id            String           @id @default(cuid())
	projectId     String
	taskId        String?
	type          String           @default("FILE")
	title         String
	url           String?
	storageKey    String?
	latestVersion Int?
	versions      ArtifactVersion[]
	contributionEvents ContributionEvent[]

	project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
	task    Task?   @relation(fields: [taskId], references: [id])
}

model ArtifactVersion {
	id          String   @id @default(cuid())
	artifactId  String
	version     Int
	contentHash String
	mimeType    String?
	sizeBytes   Int?
	createdById String
	createdAt   DateTime @default(now())

	artifact Artifact @relation(fields: [artifactId], references: [id], onDelete: Cascade)
	createdBy User    @relation("UserCreatedArtifactVersions", fields: [createdById], references: [id])

	@@unique([artifactId, version])
}

model ContributionEvent {
	id          String     @id @default(cuid())
	createdAt   DateTime   @default(now())
	userId      String
	projectId   String
	taskId      String?
	artifactId  String?
	kind        String
	weight      Int        @default(1)
	accepted    Boolean    @default(false)
	note        String?

	user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
	project  Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
	task     Task?    @relation(fields: [taskId], references: [id])
	artifact Artifact? @relation(fields: [artifactId], references: [id])
}

model ChatMessage {
	id        String   @id @default(cuid())
	projectId String
	userId    String
	content   String
	createdAt DateTime @default(now())

	project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
	user    User    @relation("UserChatMessages", fields: [userId], references: [id])
}

model Notification {
	id        String   @id @default(cuid())
	userId    String
	type      String
	payload   String?
	read      Boolean  @default(false)
	createdAt DateTime @default(now())

	user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Report {
	id          String   @id @default(cuid())
	reporterId  String
	targetType  String
	targetId    String
	reason      String
	status      String   @default("OPEN")
	createdAt   DateTime @default(now())

	reporter User @relation("UserReports", fields: [reporterId], references: [id], onDelete: Cascade)
}